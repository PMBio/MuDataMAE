[{"path":"/articles/Blood-CITE-seq.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"CITE-seq data with CiteFuse and MuData","text":"CITE-seq data provide RNA surface protein counts cells. tutorial shows MuData can integrated Bioconductor workflows analyse CITE-seq data.","code":""},{"path":"/articles/Blood-CITE-seq.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"CITE-seq data with CiteFuse and MuData","text":"Stable version MuData available future bioconductor versions. BiocManager::install(“MuData”) recent dev build can installed GitHub: library(remotes)remotes::install_github(“PMBio/MuDataMAE”)","code":""},{"path":"/articles/Blood-CITE-seq.html","id":"loading-libraries","dir":"Articles","previous_headings":"","what":"Loading libraries","title":"CITE-seq data with CiteFuse and MuData","text":"library(MuData)library(SingleCellExperiment)library(MultiAssayExperiment)library(CiteFuse)library(scater)library(rhdf5)","code":""},{"path":"/articles/Blood-CITE-seq.html","id":"loading-data","dir":"Articles","previous_headings":"","what":"Loading data","title":"CITE-seq data with CiteFuse and MuData","text":"use CITE-seq data available within CiteFuse Bioconductor package. data(“CITEseq_example”, package = “CiteFuse”)lapply(CITEseq_example, dim)#> $RNA #> [1] 19521 500 #> #> $ADT #> [1] 49 500 #> #> $HTO #> [1] 4 500 dataset contains three matrices — one RNA counts, one antibody-derived tags (ADT) counts one hashtag oligonucleotide (HTO) counts.","code":""},{"path":"/articles/Blood-CITE-seq.html","id":"processing-count-matrices","dir":"Articles","previous_headings":"","what":"Processing count matrices","title":"CITE-seq data with CiteFuse and MuData","text":"CITE-seq analysis workflows CiteFuse consulted details, exemplify simple data transformations order demonstrate output can saved H5MU file later . Following CiteFuse tutorial, start creating SingleCellExperiment object three matrices: sce_citeseq <- preprocessing(CITEseq_example)sce_citeseq#> class: SingleCellExperiment #> dim: 19521 500 #> metadata(0): #> assays(1): counts #> rownames(19521): hg19_AL627309.1 hg19_AL669831.5 … hg19_MT-ND6 #> hg19_MT-CYB #> rowData names(0): #> colnames(500): AAGCCGCGTTGTCTTT GATCGCGGTTATCGGT … TTGGCAACACTAGTAC #> GCTGCGAGTTGTGGCC #> colData names(0): #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(2): ADT HTO add new assay normalised RNA counts: sce_citeseq <- scater::logNormCounts(sce_citeseq)sce_citeseq # new assay: logcounts#> class: SingleCellExperiment #> dim: 19521 500 #> metadata(0): #> assays(2): counts logcounts #> rownames(19521): hg19_AL627309.1 hg19_AL669831.5 … hg19_MT-ND6 #> hg19_MT-CYB #> rowData names(0): #> colnames(500): AAGCCGCGTTGTCTTT GATCGCGGTTATCGGT … TTGGCAACACTAGTAC #> GCTGCGAGTTGTGGCC #> colData names(1): sizeFactor #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(2): ADT HTO ADT modality, add assay normalised counts: sce_citeseq <- CiteFuse::normaliseExprs(sce_citeseq, altExp_name = “ADT”, transform = “log”)altExp(sce_citeseq, “ADT”) # new assay: logcounts#> class: SummarizedExperiment #> dim: 49 500 #> metadata(0): #> assays(2): counts logcounts #> rownames(49): B220 (CD45R) B7-H1 (PD-L1) … TCRb TCRg #> rowData names(0): #> colnames(500): AAGCCGCGTTGTCTTT GATCGCGGTTATCGGT … TTGGCAACACTAGTAC #> GCTGCGAGTTGTGGCC #> colData names(0): also generate reduced dimensions: sce_citeseq <- scater::runPCA(sce_citeseq, exprs_values = “logcounts”, ncomponents = 20) scater::plotReducedDim(sce_citeseq, dimred = “PCA”, by_exprs_values = “logcounts”, colour_by = “CD27”)/tmp/RtmpTr2FBy/file2bc630ef6333/articles/Blood-CITE-seq_files/figure-html/unnamed-chunk-9-1.png","code":""},{"path":"/articles/Blood-CITE-seq.html","id":"making-a-multiassayexperiment-object","dir":"Articles","previous_headings":"","what":"Making a MultiAssayExperiment object","title":"CITE-seq data with CiteFuse and MuData","text":"appropriate structure multimodal datasets MultiAssayExperiment. make respective MultiAssayExperiment object sce_citeseq: experiments <- list( ADT = altExp(sce_citeseq, “ADT”), HTO = altExp(sce_citeseq, “HTO”) )# Drop modalities sce_citeseqaltExp(sce_citeseq) <- NULLexperiments[[“RNA”]] <- sce_citeseqmae <- MultiAssayExperiment(experiments)","code":""},{"path":"/articles/Blood-CITE-seq.html","id":"writing-to-h5mu","dir":"Articles","previous_headings":"","what":"Writing to H5MU","title":"CITE-seq data with CiteFuse and MuData","text":"can write contents MultiAssayExperiment object H5MU file: WriteH5MU(mae, “citefuse_example.h5mu”) can check modalities written file: h5 <- rhdf5::H5Fopen(“citefuse_example.h5mu”)h5&‘mod’#> HDF5 GROUP #> name /mod #> filename #> #> name otype dclass dim #> 0 ADT H5I_GROUP #> 1 HTO H5I_GROUP #> 2 RNA H5I_GROUP … assays ADT — raw counts stored X normalised counts corresponding layer: h5&‘mod’&‘ADT’#> HDF5 GROUP #> name /mod/ADT #> filename #> #> name otype dclass dim #> 0 X H5I_GROUP #> 1 layers H5I_GROUP #> 2 obs H5I_GROUP #> 3 var H5I_GROUP h5&‘mod’&‘ADT’&‘layers’#> HDF5 GROUP #> name /mod/ADT/layers #> filename #> #> name otype dclass dim #> 0 logcounts H5I_DATASET FLOAT 49 x 500 … well reduced dimensions (PCA): h5&‘mod’&‘RNA’&‘obsm’#> HDF5 GROUP #> name /mod/RNA/obsm #> filename #> #> name otype dclass dim #> 0 PCA H5I_DATASET FLOAT 20 x 500 rhdf5::H5close()","code":""},{"path":"/articles/Blood-CITE-seq.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"CITE-seq data with CiteFuse and MuData","text":"Muon: multimodal omics analysis framework preprint mudata (Python) documentation muon documentation web page Kim HJ, Lin Y, Geddes TA, Yang P, Yang JYH (2020). “CiteFuse enables multi-modal analysis CITE-seq data.” Bioinformatics, 36(14), 4137–4143. https://doi.org/10.1093/bioinformatics/btaa282. Ramos M, Schiffer L, Re , Azhar R, Basunia , Cabrera CR, Chan T, Chapman P, Davis S, Gomez-Cabrero D, Culhane AC, Haibe-Kains B, Hansen K, Kodali H, Louis MS, Mer , Reister M, Morgan M, Carey V, Waldron L (2017). “Software Integration Multi-Omics Experiments Bioconductor.” Cancer Research, 77(21); e39-42.","code":""},{"path":"/articles/Blood-CITE-seq.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"CITE-seq data with CiteFuse and MuData","text":"sessionInfo()#> R development (unstable) (2021-12-11 r81350) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running : Ubuntu 20.04.3 LTS #> #> Matrix products: default #> BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas..3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack..3.9.0 #> #> locale: #> [1] LC_CTYPE=C.UTF-8 LC_NUMERIC=C LC_TIME=C.UTF-8 #> [4] LC_COLLATE=C.UTF-8 LC_MONETARY=C.UTF-8 LC_MESSAGES=C.UTF-8 #> [7] LC_PAPER=C.UTF-8 LC_NAME=C LC_ADDRESS=C #> [10] LC_TELEPHONE=C LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C #> #> attached base packages: #> [1] stats4 stats graphics grDevices utils datasets methods #> [8] base #> #> attached packages: #> [1] rhdf5_2.39.2 scater_1.23.1 #> [3] ggplot2_3.3.5 scuttle_1.5.0 #> [5] CiteFuse_1.7.0 MultiAssayExperiment_1.21.5 #> [7] SingleCellExperiment_1.17.2 SummarizedExperiment_1.25.3 #> [9] Biobase_2.55.0 GenomicRanges_1.47.5 #> [11] GenomeInfoDb_1.31.1 IRanges_2.29.1 #> [13] MatrixGenerics_1.7.0 matrixStats_0.61.0 #> [15] MuData_0.99.0 S4Vectors_0.33.8 #> [17] BiocGenerics_0.41.2 Matrix_1.4-0 #> [19] BiocStyle_2.23.0 #> #> loaded via namespace (attached): #> [1] systemfonts_1.0.3 plyr_1.8.6 #> [3] igraph_1.2.9 splines_4.2.0 #> [5] BiocParallel_1.29.5 digest_0.6.29 #> [7] htmltools_0.5.2 viridis_0.6.2 #> [9] fansi_0.5.0 magrittr_2.0.1 #> [11] memoise_2.0.1 ScaledMatrix_1.3.0 #> [13] cluster_2.1.2 mixtools_1.2.0 #> [15] limma_3.51.1 graphlayouts_0.7.2 #> [17] pkgdown_2.0.1 colorspace_2.0-2 #> [19] ggrepel_0.9.1 textshaping_0.3.6 #> [21] xfun_0.28 dplyr_1.0.7 #> [23] crayon_1.4.2 RCurl_1.98-1.5 #> [25] jsonlite_1.7.2 survival_3.2-13 #> [27] glue_1.5.1 polyclip_1.10-0 #> [29] gtable_0.3.0 zlibbioc_1.41.0 #> [31] XVector_0.35.0 DelayedArray_0.21.2 #> [33] BiocSingular_1.11.0 kernlab_0.9-29 #> [35] Rhdf5lib_1.17.0 scales_1.1.1 #> [37] pheatmap_1.0.12 DBI_1.1.1 #> [39] edgeR_3.37.0 Rcpp_1.0.7 #> [41] viridisLite_0.4.0 dqrng_0.3.0 #> [43] rsvd_1.0.5 propr_4.2.6 #> [45] metapod_1.3.0 RColorBrewer_1.1-2 #> [47] ellipsis_0.3.2 pkgconfig_2.0.3 #> [49] farver_2.1.0 sass_0.4.0 #> [51] uwot_0.1.11 locfit_1.5-9.4 #> [53] utf8_1.2.2 labeling_0.4.2 #> [55] tidyselect_1.1.1 rlang_0.4.12 #> [57] reshape2_1.4.4 munsell_0.5.0 #> [59] tools_4.2.0 cachem_1.0.6 #> [61] dbscan_1.1-8 generics_0.1.1 #> [63] ggridges_0.5.3 evaluate_0.14 #> [65] stringr_1.4.0 fastmap_1.1.0 #> [67] yaml_2.2.1 ragg_1.2.1 #> [69] knitr_1.36 fs_1.5.2 #> [71] tidygraph_1.2.0 purrr_0.3.4 #> [73] randomForest_4.6-14 ggraph_2.0.5 #> [75] sparseMatrixStats_1.7.0 scran_1.23.1 #> [77] compiler_4.2.0 beeswarm_0.4.0 #> [79] tibble_3.1.6 statmod_1.4.36 #> [81] tweenr_1.0.2 bslib_0.3.1 #> [83] stringi_1.7.6 desc_1.4.0 #> [85] lattice_0.20-45 bluster_1.5.0 #> [87] vctrs_0.3.8 pillar_1.6.4 #> [89] lifecycle_1.0.1 rhdf5filters_1.7.0 #> [91] BiocManager_1.30.16 jquerylib_0.1.4 #> [93] BiocNeighbors_1.13.0 cowplot_1.1.1 #> [95] bitops_1.0-7 irlba_2.3.5 #> [97] R6_2.5.1 bookdown_0.24 #> [99] gridExtra_2.3 vipor_0.4.5 #> [101] MASS_7.3-54 assertthat_0.2.1 #> [103] rprojroot_2.0.2 withr_2.4.3 #> [105] GenomeInfoDbData_1.2.7 parallel_4.2.0 #> [107] grid_4.2.0 beachmat_2.11.0 #> [109] tidyr_1.1.4 rmarkdown_2.11 #> [111] DelayedMatrixStats_1.17.0 segmented_1.3-4 #> [113] Rtsne_0.15 ggforce_0.3.3 #> [115] ggbeeswarm_0.6.0","code":""},{"path":"/articles/Cord-Blood-CITE-seq.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"CITE-seq data with MultiAssayExperiment and MuData","text":"CITE-seq data provide RNA surface protein counts cells. tutorial shows MuData can integrated Bioconductor workflows analyse CITE-seq data.","code":""},{"path":"/articles/Cord-Blood-CITE-seq.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"CITE-seq data with MultiAssayExperiment and MuData","text":"Stable version MuData available future bioconductor versions. BiocManager::install(“MuData”) recent dev build can installed GitHub: library(remotes)remotes::install_github(“PMBio/MuDataMAE”)","code":""},{"path":"/articles/Cord-Blood-CITE-seq.html","id":"loading-libraries","dir":"Articles","previous_headings":"","what":"Loading libraries","title":"CITE-seq data with MultiAssayExperiment and MuData","text":"library(MuData)library(SingleCellExperiment)library(MultiAssayExperiment)library(SingleCellMultiModal)library(scater)library(rhdf5)","code":""},{"path":"/articles/Cord-Blood-CITE-seq.html","id":"loading-data","dir":"Articles","previous_headings":"","what":"Loading data","title":"CITE-seq data with MultiAssayExperiment and MuData","text":"use CITE-seq data accessible SingleCellMultiModal Bioconductor package, originally described Stoeckius et al., 2017. mae <- CITEseq( DataType=“cord_blood”, modes=\"“, dry.run=FALSE, version=”1.0.0\" )#> Dataset: cord_blood #> snapshotDate(): 2021-11-24 #> Working : scADT_Counts #> Working : scRNAseq_Counts #> see ?SingleCellMultiModal browseVignettes(‘SingleCellMultiModal’) documentation #> downloading 1 resources #> retrieving 1 resource #> loading cache #> see ?SingleCellMultiModal browseVignettes(‘SingleCellMultiModal’) documentation #> downloading 1 resources #> retrieving 1 resource #> loading cache mae#> MultiAssayExperiment object 2 listed #> experiments user-defined names respective classes. #> Containing ExperimentList class object length 2: #> [1] scADT: matrix 13 rows 8617 columns #> [2] scRNAseq: matrix 36280 rows 8617 columns #> Functionality: #> experiments() - obtain ExperimentList instance #> colData() - primary/phenotype DataFrame #> sampleMap() - sample coordination DataFrame #> $, [, [[ - extract colData columns, subset, experiment #> Format() - convert long wide DataFrame #> assays() - convert ExperimentList SimpleList matrices #> exportClass() - save data flat files see two modalities object — scRNAseq scADT, latter providing counts antibody-derived tags. Notably, experiment matrix.","code":""},{"path":"/articles/Cord-Blood-CITE-seq.html","id":"processing-adt-data","dir":"Articles","previous_headings":"","what":"Processing ADT data","title":"CITE-seq data with MultiAssayExperiment and MuData","text":"CITE-seq analysis workflows CiteFuse consulted details, exemplify simple data transformation order demonstrate output can saved H5MU file later . ADT counts, apply CLR transformation following Hao et al., 2020:","code":""},{"path":"/articles/Cord-Blood-CITE-seq.html","id":"define-clr-transformation-as-in-the-seurat-workflowclr---functiondata-tapplydata-1-functionx-log1px-expsumlog1pxx-0-na-rm-true-lengthx","dir":"Articles","previous_headings":"","what":"Define CLR transformation as in the Seurat workflowclr <- function(data) t(apply(data, 1, function(x) log1p(x / (exp(sum(log1p(x[x > 0]), na.rm = TRUE) / length(x))))))","title":"CITE-seq data with MultiAssayExperiment and MuData","text":"make ADT modality SingleCellExperiment object add assay CLR-transformed counts: adt_counts <- mae[[“scADT”]]mae[[“scADT”]] <- SingleCellExperiment(adt_counts)assays(mae[[“scADT”]])[[“clr”]] <- clr(adt_counts) also generate reduced dimensions taking advantage functionality scater package: mae[[“scADT”]] <- runPCA(mae[[“scADT”]], exprs_values = “clr”, ncomponents = 20)#> Warning check_numbers(k = k, nu = nu, nv = nv, limit = min(dim(x)) - : #> singular values/vectors requested available #> Warning (function (, nv = 5, nu = nv, maxit = 1000, work = nv + 7, reorth = #> TRUE, : ’re computing large percentage total singular values, use #> standard svd instead. #> Warning (function (, nv = 5, nu = nv, maxit = 1000, work = nv + 7, reorth #> = TRUE, : converge–results might invalid!; try increasing work #> maxit plotReducedDim(mae[[“scADT”]], dimred = “PCA”, by_exprs_values = “clr”, colour_by = “CD3”)/tmp/RtmpTr2FBy/file2bc630ef6333/articles/Cord-Blood-CITE-seq_files/figure-html/unnamed-chunk-8-1.pngplotReducedDim(mae[[“scADT”]], dimred = “PCA”, by_exprs_values = “clr”, colour_by = “CD14”)/tmp/RtmpTr2FBy/file2bc630ef6333/articles/Cord-Blood-CITE-seq_files/figure-html/unnamed-chunk-8-2.png","code":""},{"path":"/articles/Cord-Blood-CITE-seq.html","id":"writing-h5mu-files","dir":"Articles","previous_headings":"","what":"Writing H5MU files","title":"CITE-seq data with MultiAssayExperiment and MuData","text":"can write contents MultiAssayExperiment object H5MU file: WriteH5MU(mae, “cord_blood_citeseq.h5mu”) can check modalities written file, whether matrix RNA SingleCellExperiment ADT: h5 <- rhdf5::H5Fopen(“cord_blood_citeseq.h5mu”)h5&‘mod’#> HDF5 GROUP #> name /mod #> filename #> #> name otype dclass dim #> 0 scADT H5I_GROUP #> 1 scRNAseq H5I_GROUP … assays ADT — raw counts stored X CLR-transformed counts corresponding layer: h5&‘mod’&‘scADT’#> HDF5 GROUP #> name /mod/scADT #> filename #> #> name otype dclass dim #> 0 X H5I_DATASET INTEGER 13 x 8617 #> 1 layers H5I_GROUP #> 2 obs H5I_GROUP #> 3 obsm H5I_GROUP #> 4 var H5I_GROUP h5&‘mod’&‘scADT’&‘layers’#> HDF5 GROUP #> name /mod/scADT/layers #> filename #> #> name otype dclass dim #> 0 clr H5I_DATASET FLOAT 13 x 8617 … well reduced dimensions (PCA): h5&‘mod’&‘scADT’&‘obsm’#> HDF5 GROUP #> name /mod/scADT/obsm #> filename #> #> name otype dclass dim #> 0 PCA H5I_DATASET FLOAT 12 x 8617 rhdf5::H5close()","code":""},{"path":"/articles/Cord-Blood-CITE-seq.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"CITE-seq data with MultiAssayExperiment and MuData","text":"Muon: multimodal omics analysis framework preprint mudata (Python) documentation muon documentation web page Stoeckius, M., Hafemeister, C., Stephenson, W., Houck-Loomis, B., Chattopadhyay, P.K., Swerdlow, H., Satija, R. Smibert, P., 2017. Simultaneous epitope transcriptome measurement single cells. Nature methods, 14(9), pp.865-868. Hao, Y., Hao, S., Andersen-Nissen, E., Mauck III, W.M., Zheng, S., Butler, ., Lee, M.J., Wilk, .J., Darby, C., Zager, M. Hoffman, P., 2021. Integrated analysis multimodal single-cell data. Cell.","code":""},{"path":"/articles/Cord-Blood-CITE-seq.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"CITE-seq data with MultiAssayExperiment and MuData","text":"sessionInfo()#> R development (unstable) (2021-12-11 r81350) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running : Ubuntu 20.04.3 LTS #> #> Matrix products: default #> BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas..3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack..3.9.0 #> #> locale: #> [1] LC_CTYPE=C.UTF-8 LC_NUMERIC=C LC_TIME=C.UTF-8 #> [4] LC_COLLATE=C.UTF-8 LC_MONETARY=C.UTF-8 LC_MESSAGES=C.UTF-8 #> [7] LC_PAPER=C.UTF-8 LC_NAME=C LC_ADDRESS=C #> [10] LC_TELEPHONE=C LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C #> #> attached base packages: #> [1] stats4 stats graphics grDevices utils datasets methods #> [8] base #> #> attached packages: #> [1] rhdf5_2.39.2 scater_1.23.1 #> [3] ggplot2_3.3.5 scuttle_1.5.0 #> [5] SingleCellMultiModal_1.7.0 MultiAssayExperiment_1.21.5 #> [7] SingleCellExperiment_1.17.2 SummarizedExperiment_1.25.3 #> [9] Biobase_2.55.0 GenomicRanges_1.47.5 #> [11] GenomeInfoDb_1.31.1 IRanges_2.29.1 #> [13] MatrixGenerics_1.7.0 matrixStats_0.61.0 #> [15] MuData_0.99.0 S4Vectors_0.33.8 #> [17] BiocGenerics_0.41.2 Matrix_1.4-0 #> [19] BiocStyle_2.23.0 #> #> loaded via namespace (attached): #> [1] AnnotationHub_3.3.7 BiocFileCache_2.3.0 #> [3] systemfonts_1.0.3 BiocParallel_1.29.5 #> [5] digest_0.6.29 htmltools_0.5.2 #> [7] viridis_0.6.2 magick_2.7.3 #> [9] fansi_0.5.0 magrittr_2.0.1 #> [11] memoise_2.0.1 ScaledMatrix_1.3.0 #> [13] SpatialExperiment_1.5.0 limma_3.51.1 #> [15] Biostrings_2.63.0 R.utils_2.11.0 #> [17] pkgdown_2.0.1 colorspace_2.0-2 #> [19] blob_1.2.2 rappdirs_0.3.3 #> [21] ggrepel_0.9.1 textshaping_0.3.6 #> [23] xfun_0.28 dplyr_1.0.7 #> [25] crayon_1.4.2 RCurl_1.98-1.5 #> [27] jsonlite_1.7.2 glue_1.5.1 #> [29] gtable_0.3.0 zlibbioc_1.41.0 #> [31] XVector_0.35.0 DelayedArray_0.21.2 #> [33] BiocSingular_1.11.0 DropletUtils_1.15.2 #> [35] Rhdf5lib_1.17.0 HDF5Array_1.23.2 #> [37] scales_1.1.1 DBI_1.1.1 #> [39] edgeR_3.37.0 Rcpp_1.0.7 #> [41] viridisLite_0.4.0 xtable_1.8-4 #> [43] dqrng_0.3.0 bit_4.0.4 #> [45] rsvd_1.0.5 httr_1.4.2 #> [47] ellipsis_0.3.2 pkgconfig_2.0.3 #> [49] R.methodsS3_1.8.1 farver_2.1.0 #> [51] sass_0.4.0 dbplyr_2.1.1 #> [53] locfit_1.5-9.4 utf8_1.2.2 #> [55] tidyselect_1.1.1 labeling_0.4.2 #> [57] rlang_0.4.12 later_1.3.0 #> [59] AnnotationDbi_1.57.1 munsell_0.5.0 #> [61] BiocVersion_3.15.0 tools_4.2.0 #> [63] cachem_1.0.6 generics_0.1.1 #> [65] RSQLite_2.2.9 ExperimentHub_2.3.4 #> [67] evaluate_0.14 stringr_1.4.0 #> [69] fastmap_1.1.0 yaml_2.2.1 #> [71] ragg_1.2.1 knitr_1.36 #> [73] bit64_4.0.5 fs_1.5.2 #> [75] purrr_0.3.4 KEGGREST_1.35.0 #> [77] sparseMatrixStats_1.7.0 mime_0.12 #> [79] R.oo_1.24.0 compiler_4.2.0 #> [81] beeswarm_0.4.0 filelock_1.0.2 #> [83] curl_4.3.2 png_0.1-7 #> [85] interactiveDisplayBase_1.33.0 tibble_3.1.6 #> [87] bslib_0.3.1 stringi_1.7.6 #> [89] desc_1.4.0 lattice_0.20-45 #> [91] vctrs_0.3.8 pillar_1.6.4 #> [93] lifecycle_1.0.1 rhdf5filters_1.7.0 #> [95] BiocManager_1.30.16 jquerylib_0.1.4 #> [97] BiocNeighbors_1.13.0 cowplot_1.1.1 #> [99] bitops_1.0-7 irlba_2.3.5 #> [101] httpuv_1.6.3 R6_2.5.1 #> [103] bookdown_0.24 promises_1.2.0.1 #> [105] gridExtra_2.3 vipor_0.4.5 #> [107] assertthat_0.2.1 rprojroot_2.0.2 #> [109] rjson_0.2.20 withr_2.4.3 #> [111] GenomeInfoDbData_1.2.7 parallel_4.2.0 #> [113] grid_4.2.0 beachmat_2.11.0 #> [115] rmarkdown_2.11 DelayedMatrixStats_1.17.0 #> [117] shiny_1.7.1 ggbeeswarm_0.6.0","code":""},{"path":"/articles/Getting-Started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started with MuData for MultiAssayExperiment","text":"Multimodal data format — MuData — introduced address need cross-platform standard sharing large-scale multimodal omics data. Importantly, develops ideas compatible AnnData standard storing raw derived data unimodal datasets. Bioconductor, multimodal datasets stored MultiAssayExperiment (MAE) objects. MuData package provides functionality read data MuData files MAE objects well save MAE objects H5MU files.","code":""},{"path":"/articles/Getting-Started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting started with MuData for MultiAssayExperiment","text":"Stable version MuData available future bioconductor versions. BiocManager::install(“MuData”) recent dev build can installed GitHub: library(remotes)remotes::install_github(“PMBio/MuDataMAE”)","code":""},{"path":"/articles/Getting-Started.html","id":"loading-libraries","dir":"Articles","previous_headings":"","what":"Loading libraries","title":"Getting started with MuData for MultiAssayExperiment","text":"library(MuData)library(MultiAssayExperiment)library(rhdf5)","code":""},{"path":"/articles/Getting-Started.html","id":"writing-h5mu-files","dir":"Articles","previous_headings":"","what":"Writing H5MU files","title":"Getting started with MuData for MultiAssayExperiment","text":"’ll use simple MAE object MultiAssayExperiment package ’ll save H5MU file. data(miniACC)miniACC#> MultiAssayExperiment object 5 listed #> experiments user-defined names respective classes. #> Containing ExperimentList class object length 5: #> [1] RNASeq2GeneNorm: SummarizedExperiment 198 rows 79 columns #> [2] gistict: SummarizedExperiment 198 rows 90 columns #> [3] RPPAArray: SummarizedExperiment 33 rows 46 columns #> [4] Mutations: matrix 97 rows 90 columns #> [5] miRNASeqGene: SummarizedExperiment 471 rows 80 columns #> Functionality: #> experiments() - obtain ExperimentList instance #> colData() - primary/phenotype DataFrame #> sampleMap() - sample coordination DataFrame #> $, [, [[ - extract colData columns, subset, experiment #> *Format() - convert long wide DataFrame #> assays() - convert ExperimentList SimpleList matrices #> exportClass() - save data flat files now write contents H5MU file WriteH5MU: WriteH5MU(miniACC, “miniacc.h5mu”)","code":""},{"path":"/articles/Getting-Started.html","id":"reading-h5mu-files","dir":"Articles","previous_headings":"","what":"Reading H5MU files","title":"Getting started with MuData for MultiAssayExperiment","text":"can manually check top level structure file: rhdf5::h5ls(“miniacc.h5mu”, recursive = FALSE)#> group name otype dclass dim #> 0 / mod H5I_GROUP #> 1 / obs H5I_GROUP #> 2 / obsm H5I_GROUP #> 3 / obsmap H5I_GROUP #> 4 / var H5I_GROUP dig deeper file: h5 <- rhdf5::H5Fopen(“miniacc.h5mu”)h5&‘mod’#> HDF5 GROUP #> name /mod #> filename #> #> name otype dclass dim #> 0 Mutations H5I_GROUP #> 1 RNASeq2GeneNorm H5I_GROUP #> 2 RPPAArray H5I_GROUP #> 3 gistict H5I_GROUP #> 4 miRNASeqGene H5I_GROUP rhdf5::H5close()","code":""},{"path":"/articles/Getting-Started.html","id":"creating-mae-objects-from-h5mu-files","dir":"Articles","previous_headings":"Reading H5MU files","what":"Creating MAE objects from H5MU files","title":"Getting started with MuData for MultiAssayExperiment","text":"package provides ReadH5MU create object data H5MU file. Since H5MU structure designed accommodate structured information MAE, data read. instance, MAE support loading multimodal embeddings pairwise graphs. acc <- ReadH5MU(“miniacc.h5mu”)acc#> MultiAssayExperiment object 5 listed #> experiments user-defined names respective classes. #> Containing ExperimentList class object length 5: #> [1] Mutations: SingleCellExperiment 97 rows 90 columns #> [2] RNASeq2GeneNorm: SingleCellExperiment 198 rows 79 columns #> [3] RPPAArray: SingleCellExperiment 33 rows 46 columns #> [4] gistict: SingleCellExperiment 198 rows 90 columns #> [5] miRNASeqGene: SingleCellExperiment 471 rows 80 columns #> Functionality: #> experiments() - obtain ExperimentList instance #> colData() - primary/phenotype DataFrame #> sampleMap() - sample coordination DataFrame #> $, [, [[ - extract colData columns, subset, experiment #> *Format() - convert long wide DataFrame #> assays() - convert ExperimentList SimpleList matrices #> exportClass() - save data flat files Importantly, recover information original MAE object: head(colData(miniACC)[,1:4])#> DataFrame 6 rows 4 columns #> patientID years_to_birth vital_status days_to_death #>  #> TCGA--A5J1 TCGA--A5J1 58 1 1355 #> TCGA--A5J2 TCGA--A5J2 44 1 1677 #> TCGA--A5J3 TCGA--A5J3 23 0 NA #> TCGA--A5J4 TCGA--A5J4 23 1 423 #> TCGA--A5J5 TCGA--A5J5 30 1 365 #> TCGA--A5J6 TCGA--A5J6 29 0 NA head(colData(acc)[,1:4])#> DataFrame 6 rows 4 columns #> patientID years_to_birth vital_status days_to_death #>  #> TCGA--A5J1 TCGA--A5J1 58 1 1355 #> TCGA--A5J2 TCGA--A5J2 44 1 1677 #> TCGA--A5J3 TCGA--A5J3 23 0 NA #> TCGA--A5J4 TCGA--A5J4 23 1 423 #> TCGA--A5J5 TCGA--A5J5 30 1 365 #> TCGA--A5J6 TCGA--A5J6 29 0 NA Features metadata also recovered: head(rowData(miniACC[[“gistict”]]))#> DataFrame 6 rows 3 columns #> Gene.Symbol Locus.ID Cytoband #>  #> DIRAS3 DIRAS3 9077 1p31.3 #> MAPK14 MAPK14 1432 6p21.31 #> YAP1 YAP1 10413 11q22.1 #> CDKN1B CDKN1B 1027 12p13.1 #> ERBB2 ERBB2 2064 17q12 #> G6PD G6PD 2539 Xq28 head(rowData(acc[[“gistict”]]))#> DataFrame 6 rows 3 columns #> Gene.Symbol Locus.ID Cytoband #>  #> DIRAS3 DIRAS3 9077 1p31.3 #> MAPK14 MAPK14 1432 6p21.31 #> YAP1 YAP1 10413 11q22.1 #> CDKN1B CDKN1B 1027 12p13.1 #> ERBB2 ERBB2 2064 17q12 #> G6PD G6PD 2539 Xq28","code":""},{"path":"/articles/Getting-Started.html","id":"backed-objects","dir":"Articles","previous_headings":"Reading H5MU files > Creating MAE objects from H5MU files","what":"Backed objects","title":"Getting started with MuData for MultiAssayExperiment","text":"possible read H5MU files keeping matrices (.X .layers) disk. acc_b <- ReadH5MU(“miniacc.h5mu”, backed = TRUE)assays(acc_b[[“RNASeq2GeneNorm”]])[[1]][1:5,1:3]#> <5 x 3> matrix class DelayedMatrix type “double”: #> TCGA--A5J1-01A-11R-A29S-07 TCGA--A5J2-01A-11R-A29S-07 #> DIRAS3 1487.0317 9.6631 #> MAPK14 778.5783 2823.6469 #> YAP1 1009.6061 2305.0590 #> CDKN1B 2101.3449 4248.9584 #> ERBB2 651.2968 246.4098 #> TCGA--A5J3-01A-11R-A29S-07 #> DIRAS3 18.9602 #> MAPK14 1061.7686 #> YAP1 1561.2502 #> CDKN1B 1348.5410 #> ERBB2 90.0607 data assay DelayedMatrix object: class(assays(acc_b[[“RNASeq2GeneNorm”]])[[1]])#> [1] “DelayedMatrix” #> attr(,“package”) #> [1] “DelayedArray” contrast acc object matrices memory: assays(acc[[“RNASeq2GeneNorm”]])[[1]][1:5,1:3]#> TCGA--A5J1-01A-11R-A29S-07 TCGA--A5J2-01A-11R-A29S-07 #> DIRAS3 1487.0317 9.6631 #> MAPK14 778.5783 2823.6469 #> YAP1 1009.6061 2305.0590 #> CDKN1B 2101.3449 4248.9584 #> ERBB2 651.2968 246.4098 #> TCGA--A5J3-01A-11R-A29S-07 #> DIRAS3 18.9602 #> MAPK14 1061.7686 #> YAP1 1561.2502 #> CDKN1B 1348.5410 #> ERBB2 90.0607 print(class(assays(acc[[“RNASeq2GeneNorm”]])[[1]]))#> [1] “matrix” “array”","code":""},{"path":"/articles/Getting-Started.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Getting started with MuData for MultiAssayExperiment","text":"Muon: multimodal omics analysis framework preprint mudata (Python) documentation muon documentation web page","code":""},{"path":"/articles/Getting-Started.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Getting started with MuData for MultiAssayExperiment","text":"sessionInfo()#> R development (unstable) (2021-12-11 r81350) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running : Ubuntu 20.04.3 LTS #> #> Matrix products: default #> BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas..3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack..3.9.0 #> #> locale: #> [1] LC_CTYPE=C.UTF-8 LC_NUMERIC=C LC_TIME=C.UTF-8 #> [4] LC_COLLATE=C.UTF-8 LC_MONETARY=C.UTF-8 LC_MESSAGES=C.UTF-8 #> [7] LC_PAPER=C.UTF-8 LC_NAME=C LC_ADDRESS=C #> [10] LC_TELEPHONE=C LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C #> #> attached base packages: #> [1] stats4 stats graphics grDevices utils datasets methods #> [8] base #> #> attached packages: #> [1] rhdf5_2.39.2 MultiAssayExperiment_1.21.5 #> [3] SummarizedExperiment_1.25.3 Biobase_2.55.0 #> [5] GenomicRanges_1.47.5 GenomeInfoDb_1.31.1 #> [7] IRanges_2.29.1 MatrixGenerics_1.7.0 #> [9] matrixStats_0.61.0 MuData_0.99.0 #> [11] S4Vectors_0.33.8 BiocGenerics_0.41.2 #> [13] Matrix_1.4-0 BiocStyle_2.23.0 #> #> loaded via namespace (attached): #> [1] XVector_0.35.0 bslib_0.3.1 #> [3] compiler_4.2.0 BiocManager_1.30.16 #> [5] jquerylib_0.1.4 rhdf5filters_1.7.0 #> [7] zlibbioc_1.41.0 bitops_1.0-7 #> [9] tools_4.2.0 SingleCellExperiment_1.17.2 #> [11] digest_0.6.29 jsonlite_1.7.2 #> [13] evaluate_0.14 memoise_2.0.1 #> [15] lattice_0.20-45 rlang_0.4.12 #> [17] DelayedArray_0.21.2 yaml_2.2.1 #> [19] pkgdown_2.0.1 xfun_0.28 #> [21] fastmap_1.1.0 GenomeInfoDbData_1.2.7 #> [23] stringr_1.4.0 knitr_1.36 #> [25] desc_1.4.0 fs_1.5.2 #> [27] sass_0.4.0 systemfonts_1.0.3 #> [29] rprojroot_2.0.2 grid_4.2.0 #> [31] R6_2.5.1 textshaping_0.3.6 #> [33] HDF5Array_1.23.2 rmarkdown_2.11 #> [35] bookdown_0.24 Rhdf5lib_1.17.0 #> [37] purrr_0.3.4 magrittr_2.0.1 #> [39] htmltools_0.5.2 ragg_1.2.1 #> [41] stringi_1.7.6 RCurl_1.98-1.5 #> [43] cachem_1.0.6 crayon_1.4.2","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Danila Bredikhin. Author, maintainer. Ilia Kats. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bredikhin D, Kats (2021). MuData: Serialization MultiAssayExperiment objects. R package version 0.99.0, https://github.com/PMBio/MuDataMAE.","code":"@Manual{,   title = {MuData: Serialization for MultiAssayExperiment objects},   author = {Danila Bredikhin and Ilia Kats},   year = {2021},   note = {R package version 0.99.0},   url = {https://github.com/PMBio/MuDataMAE}, }"},{"path":"/index.html","id":"mudata","dir":"","previous_headings":"","what":"Serialization for MultiAssayExperiment objects","title":"Serialization for MultiAssayExperiment objects","text":"Documentation | Preprint | Discord MuData package provides /O funcitonality .h5mu files MultiAssayExperiment objects. can learn multimodal data containers reference mudata documentation.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Serialization for MultiAssayExperiment objects","text":"MuData uses rhdf5 access .h5mu .h5ad files. meantime, bioc-devel version rhdf5 must used. rhdf5 MuData can installed running use rhdf5 hdf5r stay compatible rest Bioconductor ecosystem. particular, using hdf5r make integrating packages building rhdf5, HDF5Array, much difficult, impossible. implemented necessary HDF5 features .h5ad consequently .h5mu formats make use upstream, including file creation properties object references.","code":"remotes::install_github(\"grimbough/rhdf5\") remotes::install_github(\"pmbio/MuDataMAE\")"},{"path":"/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Serialization for MultiAssayExperiment objects","text":"MuData provides set /O operations multimodal data. MuData implements WriteH5MU() saves MultiAssayExperiment objects .h5mu files can integrated workflows multiple programming languages, including muon Python library Muon.jl Julia library. ReadH5MU() reads .h5mu files MultiAssayExperiment objects.","code":""},{"path":"/index.html","id":"writing-files","dir":"","previous_headings":"Quick start","what":"Writing files","title":"Serialization for MultiAssayExperiment objects","text":"Start existing dataset, e.g. MultiAssayExperiment object five distinct modalities: WriteH5MU() allows save object .h5mu file:","code":"library(MultiAssayExperiment) data(miniACC) library(MuData) WriteH5MU(miniACC, \"miniACC.h5mu\")"},{"path":"/index.html","id":"reading-files","dir":"","previous_headings":"Quick start","what":"Reading files","title":"Serialization for MultiAssayExperiment objects","text":"","code":"miniACC <- ReadH5MU(\"miniACC.h5mu\")"},{"path":"/index.html","id":"relevant-projects","dir":"","previous_headings":"","what":"Relevant projects","title":"Serialization for MultiAssayExperiment objects","text":"R packages multimodal /O include: MuDataSeurat Seurat objects SeuratDisk","code":""},{"path":"/reference/ReadH5AD.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an .h5ad file and create a SingleCellExperiment. — ReadH5AD","title":"Read an .h5ad file and create a SingleCellExperiment. — ReadH5AD","text":"file-backed mode, main X matrix read memory, references HDF5 file required parts read demand. requires HDF5Array package installed.","code":""},{"path":"/reference/ReadH5AD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an .h5ad file and create a SingleCellExperiment. — ReadH5AD","text":"","code":"ReadH5AD(file, backed = FALSE)"},{"path":"/reference/ReadH5AD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an .h5ad file and create a SingleCellExperiment. — ReadH5AD","text":"file Path .h5ad file. backed Whether use file-backed mode.","code":""},{"path":"/reference/ReadH5AD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an .h5ad file and create a SingleCellExperiment. — ReadH5AD","text":"SingleCellExperiment.","code":""},{"path":"/reference/ReadH5AD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an .h5ad file and create a SingleCellExperiment. — ReadH5AD","text":"","code":"data(miniACC, package=\"MultiAssayExperiment\") WriteH5AD(miniACC[[1]], \"miniacc.h5ad\") sce <- ReadH5AD(\"miniacc.h5ad\")"},{"path":"/reference/ReadH5MU.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an .h5mu file and create a MultiAssayExperiment. — ReadH5MU","title":"Read an .h5mu file and create a MultiAssayExperiment. — ReadH5MU","text":"file-backed mode, main X matrices read memory, reference HDF5 file required parts read demand. requires HDF5Array package installed.","code":""},{"path":"/reference/ReadH5MU.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an .h5mu file and create a MultiAssayExperiment. — ReadH5MU","text":"","code":"ReadH5MU(file, backed = FALSE)"},{"path":"/reference/ReadH5MU.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an .h5mu file and create a MultiAssayExperiment. — ReadH5MU","text":"file Path .h5mu file. backed Whether use file-backed mode.","code":""},{"path":"/reference/ReadH5MU.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an .h5mu file and create a MultiAssayExperiment. — ReadH5MU","text":"MultiAssayExperiment","code":""},{"path":"/reference/ReadH5MU.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an .h5mu file and create a MultiAssayExperiment. — ReadH5MU","text":"","code":"data(miniACC, package=\"MultiAssayExperiment\") WriteH5MU(miniACC, \"miniacc.h5mu\") mae <- ReadH5MU(\"miniacc.h5mu\")"},{"path":"/reference/WriteH5AD.html","id":null,"dir":"Reference","previous_headings":"","what":"Save an experiment to an .h5ad file. — WriteH5AD","title":"Save an experiment to an .h5ad file. — WriteH5AD","text":"Note NA values supported HDF5, therefore h5ad. behavior function NAs present undefined.","code":""},{"path":"/reference/WriteH5AD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save an experiment to an .h5ad file. — WriteH5AD","text":"","code":"WriteH5AD(object, file, overwrite = TRUE, ...)  # S4 method for Matrix_OR_DelayedMatrix,H5IdComponent WriteH5AD(object, file, overwrite, write_dimnames = TRUE)  # S4 method for SummarizedExperiment,H5IdComponent WriteH5AD(object, file, overwrite)  # S4 method for RangedSummarizedExperiment,H5IdComponent WriteH5AD(object, file, overwrite)  # S4 method for SingleCellExperiment,H5IdComponent WriteH5AD(object, file, overwrite)  # S4 method for ANY,H5IdComponent WriteH5AD(object, file, overwrite)  # S4 method for ANY,character WriteH5AD(object, file, overwrite)"},{"path":"/reference/WriteH5AD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save an experiment to an .h5ad file. — WriteH5AD","text":"object object save. file Name file save . overwrite Currently unused. ... additional arguments. write_dimnames Whether export colnames rownames.","code":""},{"path":"/reference/WriteH5AD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save an experiment to an .h5ad file. — WriteH5AD","text":"NULL, invisibly","code":""},{"path":"/reference/WriteH5AD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save an experiment to an .h5ad file. — WriteH5AD","text":"","code":"data(miniACC, package=\"MultiAssayExperiment\") WriteH5AD(miniACC[[1]], \"miniacc.h5ad\")"},{"path":"/reference/WriteH5MU.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a MultiAssayExperiment to an .h5mu file. — WriteH5MU","title":"Save a MultiAssayExperiment to an .h5mu file. — WriteH5MU","text":"Note NA values supported HDF5, therefore h5mu. behavior function NAs present undefined.","code":""},{"path":"/reference/WriteH5MU.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a MultiAssayExperiment to an .h5mu file. — WriteH5MU","text":"","code":"WriteH5MU(object, file, overwrite = TRUE)  # S4 method for MultiAssayExperiment,character WriteH5MU(object, file, overwrite = TRUE)"},{"path":"/reference/WriteH5MU.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a MultiAssayExperiment to an .h5mu file. — WriteH5MU","text":"object MultiAssayExperiment. file Name file save . overwrite Currently unused.","code":""},{"path":"/reference/WriteH5MU.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a MultiAssayExperiment to an .h5mu file. — WriteH5MU","text":"NULL, invisibly","code":""},{"path":"/reference/WriteH5MU.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a MultiAssayExperiment to an .h5mu file. — WriteH5MU","text":"","code":"data(miniACC, package=\"MultiAssayExperiment\") WriteH5MU(miniACC, \"miniacc.h5mu\")"}]
